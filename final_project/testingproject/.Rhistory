res.leg <- GET(url)
body.leg <- content(res.leg, 'text')
content.leg <- fromJSON(body.leg)
content.leg <- content.leg$results
leg.info <- content.leg %>% select(bioguide_id, first_name, last_name, party)
voters <- left_join(voters, leg.info)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
params <- list('congress' = '115', 'number' = roll.id, 'fields' = 'chamber,number,voter_ids,source', 'vote_type' = 'amendment')
url <- paste0(api, '/votes')
res.vote <- GET(url, query = params)
body.vote <- content(res.vote, 'text')
content.vote <- fromJSON(body.vote)
content.vote <- content.vote$results
link <- content.vote %>% select(source)
voters <- content.vote %>% select(voter_ids)
votes <- as.character(voters[1, ])
print(votes)
voters <- data.frame(bioguide_id = colnames(voters$voter_ids), vote = votes)
params <- list('per_page' = 'all')
url <- paste0(api, '/legislators')
res.leg <- GET(url, query = params)
body.leg <- content(res.leg, 'text')
content.leg <- fromJSON(body.leg)
content.leg <- content.leg$results
leg.info <- content.leg %>% select(bioguide_id, first_name, last_name, party)
voters <- left_join(voters, leg.info)
params <- list('congress' = '115', 'number' = roll.id, 'fields' = 'chamber,number,voter_ids,source', 'vote_type' = 'amendment')
url <- paste0(api, '/votes')
res.vote <- GET(url, query = params)
body.vote <- content(res.vote, 'text')
content.vote <- fromJSON(body.vote)
content.vote <- content.vote$results
link <- content.vote %>% select(source)
voters <- content.vote %>% select(voter_ids)
votes <- as.character(voters[1, ])
print(votes)
voters <- data.frame(bioguide_id = colnames(voters$voter_ids), vote = votes)
params <- list('per_page' = 'all')
url <- paste0(api, '/legislators')
res.leg <- GET(url, query = params)
body.leg <- content(res.leg, 'text')
content.leg <- fromJSON(body.leg)
content.leg <- content.leg$results
leg.info <- content.leg %>% select(bioguide_id, first_name, last_name, party)
voters <- left_join(voters, leg.info)
yea <- voters %>% filter(vote == 'Yea')
nay <- voters %>% filter(vote == 'Nay')
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
library(ggplot2)
api <- 'https://congress.api.sunlightfoundation.com'
zip.code <- '98075'
search.query <- 'guns'
roll.id <- '36'
roll.url <- 'https://www.govtrack.us/congress/votes/115-2017/s36'
ggplot(data = yea) +
geom_histogram(mapping = aes(x = party))
ggplot(data = yea) +
geom_histogram(mapping = aes(x = Party, color = Party), stat = 'count')
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
source('C:/Users/Conner/Dropbox/School/2017 Winter/INFO 201/a5-test.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Import required libraries
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
library(ggplot2)
# Save base API URI as a constant
api <- 'https://congress.api.sunlightfoundation.com'
# Save setup variables for API parameters
zip.code <- '98075'
search.query <- 'guns'
roll.id <- '36'
roll.url <- 'https://www.govtrack.us/congress/votes/115-2017/s36'
ggplot(data = voters.df) +
stat_count(mapping = aes(x = voter.party))
knitr::opts_chunk$set(echo = TRUE)
# Import required libraries
library(httr)
library(jsonlite)
library(knitr)
library(dplyr)
library(ggplot2)
# Save base API URI as a constant
api <- 'https://congress.api.sunlightfoundation.com'
# Save setup variables for API parameters
zip.code <- '98075'
search.query <- 'guns'
roll.id <- '36'
roll.url <- 'https://www.govtrack.us/congress/votes/115-2017/s36'
# Get representative info for provided zip code (GET, extract content, convert from JSON)
params <- list('zip' = zip.code)
url <- paste0(api, '/legislators/locate')
res.local <- GET(url, query = params)
body.local <- content(res.local, 'text')
content.local <- fromJSON(body.local)
# See only result data
content.local <- content.local$results
# Look at only name, state, party, and phone columns
basic.info <- content.local %>% select(first_name, last_name, state, party, phone)
# Concatenate strings to describe each representative
rep.info <- paste0(basic.info$first_name, ' ', basic.info$last_name, ' (', basic.info$state, '-', basic.info$party, '). Phone: ', basic.info$phone)
# Get bill info for provided search query (GET, extract content, convert from JSON)
params <- list('query' = search.query, 'per_page' = '25', 'order' = 'introduced_on')
url <- paste0(api, '/bills/search')
res.bills <- GET(url, query = params)
body.bills <- content(res.bills, 'text')
content.bills <- fromJSON(body.bills)
# See only result data
content.bills <- content.bills$results
# Add new column with formatted link data and narrow down columns
content.bills$link <- paste0('[link](',content.bills$urls$congress,')')
content.bills <- content.bills %>% select(bill_id, introduced_on, official_title, link)
# Change column names to be more human-readable
colnames(content.bills) <- c('Bill ID', 'Introduced', 'Official Title', 'Link')
# Get bill info for provided search query (GET, extract content, convert from JSON)
# Specify Congress iteration, bill number, and data in response
params <- list('congress' = '115', 'number' = roll.id, 'fields' = 'voters')
url <- paste0(api, '/votes')
# GET call on API based on parameters
get.request.result <- GET(url, query = params)
# Extract the content of the response body as a list
request.body.as.list <- content(get.request.result)
# Get voters list from response body
voters.list <- request.body.as.list$results[[1]]$voters
# Removes names from voter list
names(voters.list) <- NULL
# Translates to JSON
voters.json <- toJSON(voters.list)
# Arrange data into a data frame after translating from JSON
voters.df <- flatten(fromJSON(voters.json, flatten=TRUE))
voters.as.data.frame <- voters.df
# Save yea / nay voters into separate data frames
yea <- voters.df %>% filter(vote == 'Yea') %>% select(voter.last_name, voter.party)
nay <- voters.df %>% filter(vote == 'Nay') %>% select(voter.last_name, voter.party)
# Split voters into their parties, then based on their vote
# Then, determine what the majority vote for the party was
dems <- voters.df %>% filter(voter.party == 'D')
d.y <- dems %>% filter(vote == 'Yea')
if(nrow(d.y) / nrow(dems) >= .5){
d.vote <- 'Yea'
}else{
d.vote <- 'Nay'
>>>>>>> thejas
}
return(to.be.graph)
}
)
# Bonus: Assign a reactive `renderDataTable()` function to the outputted table
# You may want to use a `reactive()` variable to avoid needing to filter the data twice!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui=app.ui,server=app.server)
library(ggplot2)
?map
?geom_map
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
??map
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
?maps
library(ggplot2)
library(maps)
library(ggplot2)
library(maps)
?maps
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
?map_data
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
usa.map <- map_data("usa")
usa.map
View(usa.map)
View(usa.map)
source('~/Desktop/UW/INFO 201/final_project/test.R')
usa.map <- map_data("county")
source('~/Desktop/UW/INFO 201/final_project/test.R')
library(ggplot2)
usa.map <- map_data("state")
source('~/Desktop/UW/INFO 201/final_project/test.R')
source('~/Desktop/UW/INFO 201/final_project/test.R')
shiny::runApp('Desktop/UW/INFO 201/final_project/INFOGroupProject')
setwd("~/Desktop/UW/INFO 201/final_project/INFOGroupProject")
setwd("~/Desktop/UW/INFO 201/final_project/INFOGroupProject")
full.data.set <- read.csv('filtered_college_data.csv', stringsAsFactors=FALSE)
View(full.data.set)
runApp()
select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP05', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP05' != "0")
View(select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP05', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP05' != "0"))
is.numeric(full.data.set$PCIP04[1])
filter_(input$major != "0")s
test <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP04', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP04' != "0")
View(test)
test <- mutate_(test, 'PCIP04'=replace('PCIP04',ss))
?replace
?select
?replace
test <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP04', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT") %>%
filter_('PCIP04' != "0")
View(test)
test$PCIP04[2] == "0"
test$PCIP04[2] != "0"
filter_(test,'PCIP04' == "1")
filter_(test,'PCIP04' == "0")
filter_(test,'PCIP04' == "PCIP04")
filter_(test,~ 'PCIP04' == "0")
filter_(test,~'PCIP04' == "0")
filter_(test,~'PCIP04' == "PCIP04")
?as.name
?as.ysmbol
?as.symbol
filter_(test,as.name('PCIP04') == "PCIP04")
filter_(test,as.name('PCIP04') == "0")
filter_(test,as.symbol('PCIP04') == "0")
filter(test,as.symbol('PCIP04') == "0")
filter_(test,PCIP04 == "0")
filter(test,PCIP04 == "0")
filter(test,'['(test,'PCIP04')==0)
filter_(test,'['(test,'PCIP04')==0)
filter(test,'['(test,'PCIP04')==0)
filter(test,'['(test,'PCIP04')!=0)
filter(test,'['(test,'PCIP04')!= 0 & '['(test,'PCIP04')!= NULL)
filter(test,'['(test,'PCIP04')!= 0,'['(test,'PCIP04')!= NULL)
filter(test,'['(test,'PCIP04')!= 0,'['(test,'PCIP04')!= "NULL")
runApp()
runApp()
runApp()
test <- select_(full.data.set, "INSTNM", "CITY", "STABBR","ZIP","LATITUDE",
"LONGITUDE","INSTURL","ADM_RATE", "SATVRMID", "SATMTMID","SATWRMID",
'PCIP12', "UGDS", "TUITIONFEE_IN", "TUITIONFEE_OUT")
View(test)
test <- test %>% filter_(.dots=paste0('PCIP12',"!= ","0"))
test <- test %>% filter(SATVRMID != "NULL", SATMTMID != "NULL", SATWRMID != "NULL")
test <- test %>% filter(SATVRMID != "NULL", SATMTMID != "NULL", SATWRMID != "NULL")
View(test)
runApp()
library(shiny)
library(dplyr)
runApp()
runApp()
?conditionalPanel
runApp()
runApp()
setwd("C:/Users/pvthe/Desktop/uw hw/sophmore/Winter/Info 201/Group Project/INFOGroupProject")
runApp()
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(sp)
library(leaflet)
library(htmltools)
url <- 'https://api.mapbox.com/styles/v1/connergillette/cizyy5a9m004m2smjhu438php/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiY29ubmVyZ2lsbGV0dGUiLCJhIjoiY2l6cWIwOWJuMDE3azMzcDdvdmx3eWMwMyJ9.Qa235PPv1uPZtvaWIUSpQA'
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT
)
shinyServer(function(input, output) {
output$map <- renderLeaflet({
df$LATITUDE <- as.numeric(df$LATITUDE)
df$LONGITUDE <- as.numeric(df$LONGITUDE)
popup.content <- paste(sep = '<br />', paste0('<a target="_blank" href="http://', df$INSTURL, '">',
df$INSTNM, '</a>'), paste0('<b>Location: </b>', df$CITY, ', ', df$STABBR), ifelse(df$ADM_RATE != 'NULL',
paste0('<b>Admission Rate: </b>', as.numeric(df$ADM_RATE) * 100, '%'), '<b>Admission Rate:</b> Not given'))
leaflet(df) %>%
addCircleMarkers(popup = popup.content, stroke = FALSE, fillOpacity = 1, radius = 4) %>%
addTiles(urlTemplate = url, attribution = 'Maps provided by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
})
})
runApp()
runApp()
shinyServer(function(input, output) {
url <- 'https://api.mapbox.com/styles/v1/connergillette/cizyy5a9m004m2smjhu438php/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiY29ubmVyZ2lsbGV0dGUiLCJhIjoiY2l6cWIwOWJuMDE3azMzcDdvdmx3eWMwMyJ9.Qa235PPv1uPZtvaWIUSpQA'
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT
)
#df <- head(df, 100)
#View(df)
output$map <- renderLeaflet({
df$LATITUDE <- as.numeric(df$LATITUDE)
df$LONGITUDE <- as.numeric(df$LONGITUDE)
popup.content <- paste(sep = '<br />', paste0('<a target="_blank" href="http://', df$INSTURL, '">',
df$INSTNM, '</a>'), paste0('<b>Location: </b>', df$CITY, ', ', df$STABBR), ifelse(df$ADM_RATE != 'NULL',
paste0('<b>Admission Rate: </b>', as.numeric(df$ADM_RATE) * 100, '%'), '<b>Admission Rate:</b> Not given'))
leaflet(df) %>%
addCircleMarkers(popup = ~htmlEscape(paste0(INSTNM, ', ', CITY)), stroke = FALSE, fillOpacity = 1, radius = 4) %>%
addTiles(urlTemplate = url, attribution = 'Maps provided by <a href="http://www.mapbox.com/">Mapbox</a>') %>%
setView(lng = -104.82, lat = 47.55, zoom = 3)
})
})
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT)
is.data.frame(df)
View(df)
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?filter()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- as.data.frame(read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE)) %>% select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT)
df <- filter(df, !is.na(LATITUDE)) %>% filter(!is.na(LONGITUDE))
View(df)
runApp()
runApp()
?as.numeric
runApp()
shiny::runApp()
library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
# For map visualization
library(sp)
library(leaflet)
library(htmltools)
runApp()
runApp()
``?leafletOutput
?leafletOutput
runApp()
?sidePanel
?sidebarPanel
runApp()
runApp()
df <- read.csv('filtered_college_data.csv', stringsAsFactors=FALSE)
View(df)
View(df)
runApp()
runApp()
runApp()
?leafletOutput
runApp()
runApp()
runApp()
full.data.set <- read.csv('filtered_college_data.csv', stringsAsFactors=FALSE)
View(full.data.set)
runApp()
runApp()
?cat
runApp()
runApp()
runApp()
1 == 2
1 = 2
1 == 1
runApp()
df
filter(df,LATITUDE == 34.783368,LONGITUDE==-86.568502)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderText
runApp()
?renderHTML
??renderHTML
?htmlOutput
runApp()
?knitr
??knitr
?kable
??kable
install.packages(htmlTable)
install.packages('htmlTable')
library(htmlTable)
runApp()
runApp()
install.packages('shinythemes')
runApp()
runApp()
runApp()
runApp()
max(full.data.set$TUITIONFEE_IN)
?max
max(full.data.set$TUITIONFEE_IN,na.rm = FALSE)
test <- filter(full.data.set,!is.null(TUITIONFEE_IN))
test <- filter(full.data.set,TUITIONFEE_IN != "NULL")
max(test$TUITIONFEE_IN)
max(test$TUITIONFEE_OUT)
test <- filter(full.data.set,TUITIONFEE_OUT != "NULL")
max(test$TUITIONFEE_OUT)
View(test)
?max
test$TUITIONFEE_IN <- as.numeric(test$TUITIONFEE_IN)
test$TUITIONFEE_OUT <- as.numeric(test$TUITIONFEE_OUT)
max(test$TUITIONFEE_OUT)
max(test$TUITIONFEE_IN)
max(data.set$ADM_RATE)
data.set <- read.csv('MERGED2014_15_PP.csv', stringsAsFactors=FALSE)
data.set <- read.csv('MERGED2014_15_PP.csv', stringsAsFactors=FALSE)
data.set$TUITIONFEE_IN <- as.numeric(data.set$TUITIONFEE_IN)
data.set$TUITIONFEE_OUT <- as.numeric(data.set$TUITIONFEE_OUT)
data.set$ADM_RATE <- as.numeric(data.set$ADM_RATE)
data.set$UGDS <- as.numeric(data.set$UGDS)
data.set$SATMTMID <- as.numeric(data.set$SATMTMID)
data.set$SATVRMID <- as.numeric(data.set$SATVRMID)
data.set$SATWRMID <- as.numeric(data.set$SATWRMID)
max(data.set$TUITIONFEE_IN)
max(data.set$TUITIONFEE_IN, na.rm = FALSE)
max(data.set$TUITIONFEE_IN, na.rm = TRUE)
max(data.set$ADM_RATE, na.rm = TRUE)
runApp()
max(data.set$UGDS, na.rm=TRUE)
filter(data.set,UGDS == max(data.set$UGDS,na.rm=TRUE))
filter(data.set,UGDS == max(data.set$UGDS,na.rm=TRUE)) %>% select(INSTNM)
max(data.set$UGDS, na.rm=TRUE)
max(data.set$UGDS <100000, na.rm=TRUE)
max(data.set$UGDS, na.rm=TRUE)
runApp()
max(d)
data.set <- read.csv('filtered_college_data.csv', stringsAsFactors=FALSE)
data.set$TUITIONFEE_IN <- as.numeric(data.set$TUITIONFEE_IN)
data.set$TUITIONFEE_OUT <- as.numeric(data.set$TUITIONFEE_OUT)
data.set$ADM_RATE <- as.numeric(data.set$ADM_RATE)
data.set$UGDS <- as.numeric(data.set$UGDS)
data.set$SATMTMID <- as.numeric(data.set$SATMTMID)
data.set$SATVRMID <- as.numeric(data.set$SATVRMID)
data.set$SATWRMID <- as.numeric(data.set$SATWRMID)
max(data.set$UGDS,na.rm=TRUE)
filter(data.set,UGDS == max(data.set$UGDS,na.rm=TRUE)) %>% select(INSTNM)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/UW/INFO 201/final_project/testingproject")
runApp()
full.data <- read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE) %>%
select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT)
full.data <- read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE) %>%
select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT, DEBT_MDN)
View(full.data)
full.data <- read.csv('MERGED2014_15_PP.csv', stringsAsFactors = FALSE) %>%
select(INSTNM, CITY, STABBR, ZIP, LATITUDE, LONGITUDE, INSTURL, ADM_RATE, SATVRMID, SATMTMID, SATWRMID, starts_with('PCIP'), UGDS, TUITIONFEE_IN, TUITIONFEE_OUT, DEBT_MDN, INEXPFTE)
write.csv(full.data, 'filtered_college_data2.csv')
df <- read.csv('filtered_college_data2.csv', stringsAsFactors=FALSE)
View(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
INEXPFTEs
?median
?mean
runApp()
runApp()
runApp()
runApp()
